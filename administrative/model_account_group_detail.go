/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AccountGroupDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AccountGroupDetail{}

// AccountGroupDetail struct for AccountGroupDetail
type AccountGroupDetail struct {
	// A unique identifier associated with your account group. You can retrieve your `AccountGroupId` from the `/account-groups` endpoint.
	Aid *string `json:"aid,omitempty"`
	// Account group name
	AccountGroupName *string `json:"accountGroupName,omitempty"`
	// Indicates whether the requested aid is the context of the current account.
	IsCurrentAccountGroup *bool `json:"isCurrentAccountGroup,omitempty"`
	// Indicates whether the aid is the default one for the requesting user.
	IsDefaultAccountGroup *bool `json:"isDefaultAccountGroup,omitempty"`
	// (Optional) The name of the organization associated with the account group.
	OrganizationName *string `json:"organizationName,omitempty"`
	// (Optional) The ID for the organization associated with the account group.
	OrgId  *string            `json:"orgId,omitempty"`
	Users  []UserAccountGroup `json:"users,omitempty"`
	Links  *SelfLinks         `json:"_links,omitempty"`
	Agents []EnterpriseAgent  `json:"agents,omitempty"`
	// The account group token is an alphanumeric string used to bind an Enterprise Agent to a specific account group. This token is not a password that must be kept secret. You can retrieve your `AccountGroupToken` from the `/account-groups/{id}` endpoint.
	AccountToken *string `json:"accountToken,omitempty"`
}

// NewAccountGroupDetail instantiates a new AccountGroupDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountGroupDetail() *AccountGroupDetail {
	this := AccountGroupDetail{}
	return &this
}

// NewAccountGroupDetailWithDefaults instantiates a new AccountGroupDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountGroupDetailWithDefaults() *AccountGroupDetail {
	this := AccountGroupDetail{}
	return &this
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetAid() string {
	if o == nil || utils.IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetAidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *AccountGroupDetail) SetAid(v string) {
	o.Aid = &v
}

// GetAccountGroupName returns the AccountGroupName field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetAccountGroupName() string {
	if o == nil || utils.IsNil(o.AccountGroupName) {
		var ret string
		return ret
	}
	return *o.AccountGroupName
}

// GetAccountGroupNameOk returns a tuple with the AccountGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetAccountGroupNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccountGroupName) {
		return nil, false
	}
	return o.AccountGroupName, true
}

// HasAccountGroupName returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasAccountGroupName() bool {
	if o != nil && !utils.IsNil(o.AccountGroupName) {
		return true
	}

	return false
}

// SetAccountGroupName gets a reference to the given string and assigns it to the AccountGroupName field.
func (o *AccountGroupDetail) SetAccountGroupName(v string) {
	o.AccountGroupName = &v
}

// GetIsCurrentAccountGroup returns the IsCurrentAccountGroup field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetIsCurrentAccountGroup() bool {
	if o == nil || utils.IsNil(o.IsCurrentAccountGroup) {
		var ret bool
		return ret
	}
	return *o.IsCurrentAccountGroup
}

// GetIsCurrentAccountGroupOk returns a tuple with the IsCurrentAccountGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetIsCurrentAccountGroupOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsCurrentAccountGroup) {
		return nil, false
	}
	return o.IsCurrentAccountGroup, true
}

// HasIsCurrentAccountGroup returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasIsCurrentAccountGroup() bool {
	if o != nil && !utils.IsNil(o.IsCurrentAccountGroup) {
		return true
	}

	return false
}

// SetIsCurrentAccountGroup gets a reference to the given bool and assigns it to the IsCurrentAccountGroup field.
func (o *AccountGroupDetail) SetIsCurrentAccountGroup(v bool) {
	o.IsCurrentAccountGroup = &v
}

// GetIsDefaultAccountGroup returns the IsDefaultAccountGroup field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetIsDefaultAccountGroup() bool {
	if o == nil || utils.IsNil(o.IsDefaultAccountGroup) {
		var ret bool
		return ret
	}
	return *o.IsDefaultAccountGroup
}

// GetIsDefaultAccountGroupOk returns a tuple with the IsDefaultAccountGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetIsDefaultAccountGroupOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefaultAccountGroup) {
		return nil, false
	}
	return o.IsDefaultAccountGroup, true
}

// HasIsDefaultAccountGroup returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasIsDefaultAccountGroup() bool {
	if o != nil && !utils.IsNil(o.IsDefaultAccountGroup) {
		return true
	}

	return false
}

// SetIsDefaultAccountGroup gets a reference to the given bool and assigns it to the IsDefaultAccountGroup field.
func (o *AccountGroupDetail) SetIsDefaultAccountGroup(v bool) {
	o.IsDefaultAccountGroup = &v
}

// GetOrganizationName returns the OrganizationName field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetOrganizationName() string {
	if o == nil || utils.IsNil(o.OrganizationName) {
		var ret string
		return ret
	}
	return *o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetOrganizationNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OrganizationName) {
		return nil, false
	}
	return o.OrganizationName, true
}

// HasOrganizationName returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasOrganizationName() bool {
	if o != nil && !utils.IsNil(o.OrganizationName) {
		return true
	}

	return false
}

// SetOrganizationName gets a reference to the given string and assigns it to the OrganizationName field.
func (o *AccountGroupDetail) SetOrganizationName(v string) {
	o.OrganizationName = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetOrgId() string {
	if o == nil || utils.IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetOrgIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasOrgId() bool {
	if o != nil && !utils.IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *AccountGroupDetail) SetOrgId(v string) {
	o.OrgId = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetUsers() []UserAccountGroup {
	if o == nil || utils.IsNil(o.Users) {
		var ret []UserAccountGroup
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetUsersOk() ([]UserAccountGroup, bool) {
	if o == nil || utils.IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasUsers() bool {
	if o != nil && !utils.IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserAccountGroup and assigns it to the Users field.
func (o *AccountGroupDetail) SetUsers(v []UserAccountGroup) {
	o.Users = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetLinks() SelfLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret SelfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetLinksOk() (*SelfLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SelfLinks and assigns it to the Links field.
func (o *AccountGroupDetail) SetLinks(v SelfLinks) {
	o.Links = &v
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetAgents() []EnterpriseAgent {
	if o == nil || utils.IsNil(o.Agents) {
		var ret []EnterpriseAgent
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetAgentsOk() ([]EnterpriseAgent, bool) {
	if o == nil || utils.IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasAgents() bool {
	if o != nil && !utils.IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []EnterpriseAgent and assigns it to the Agents field.
func (o *AccountGroupDetail) SetAgents(v []EnterpriseAgent) {
	o.Agents = v
}

// GetAccountToken returns the AccountToken field value if set, zero value otherwise.
func (o *AccountGroupDetail) GetAccountToken() string {
	if o == nil || utils.IsNil(o.AccountToken) {
		var ret string
		return ret
	}
	return *o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupDetail) GetAccountTokenOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccountToken) {
		return nil, false
	}
	return o.AccountToken, true
}

// HasAccountToken returns a boolean if a field has been set.
func (o *AccountGroupDetail) HasAccountToken() bool {
	if o != nil && !utils.IsNil(o.AccountToken) {
		return true
	}

	return false
}

// SetAccountToken gets a reference to the given string and assigns it to the AccountToken field.
func (o *AccountGroupDetail) SetAccountToken(v string) {
	o.AccountToken = &v
}

func (o AccountGroupDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountGroupDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.AccountGroupName) {
		toSerialize["accountGroupName"] = o.AccountGroupName
	}
	if !utils.IsNil(o.IsCurrentAccountGroup) {
		toSerialize["isCurrentAccountGroup"] = o.IsCurrentAccountGroup
	}
	if !utils.IsNil(o.IsDefaultAccountGroup) {
		toSerialize["isDefaultAccountGroup"] = o.IsDefaultAccountGroup
	}
	if !utils.IsNil(o.OrganizationName) {
		toSerialize["organizationName"] = o.OrganizationName
	}
	if !utils.IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !utils.IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	if !utils.IsNil(o.AccountToken) {
		toSerialize["accountToken"] = o.AccountToken
	}
	return toSerialize, nil
}

type NullableAccountGroupDetail struct {
	value *AccountGroupDetail
	isSet bool
}

func (v NullableAccountGroupDetail) Get() *AccountGroupDetail {
	return v.value
}

func (v *NullableAccountGroupDetail) Set(val *AccountGroupDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountGroupDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountGroupDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountGroupDetail(val *AccountGroupDetail) *NullableAccountGroupDetail {
	return &NullableAccountGroupDetail{value: val, isSet: true}
}

func (v NullableAccountGroupDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountGroupDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
