/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/core"
)

// checks if the AccountGroups type satisfies the MappedNullable interface at compile time
var _ core.MappedNullable = &AccountGroups{}

// AccountGroups struct for AccountGroups
type AccountGroups struct {
	AccountGroups []AccountGroupInfo `json:"accountGroups,omitempty"`
	Links *SelfLinks `json:"_links,omitempty"`
}

// NewAccountGroups instantiates a new AccountGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountGroups() *AccountGroups {
	this := AccountGroups{}
	return &this
}

// NewAccountGroupsWithDefaults instantiates a new AccountGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountGroupsWithDefaults() *AccountGroups {
	this := AccountGroups{}
	return &this
}

// GetAccountGroups returns the AccountGroups field value if set, zero value otherwise.
func (o *AccountGroups) GetAccountGroups() []AccountGroupInfo {
	if o == nil || core.IsNil(o.AccountGroups) {
		var ret []AccountGroupInfo
		return ret
	}
	return o.AccountGroups
}

// GetAccountGroupsOk returns a tuple with the AccountGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroups) GetAccountGroupsOk() ([]AccountGroupInfo, bool) {
	if o == nil || core.IsNil(o.AccountGroups) {
		return nil, false
	}
	return o.AccountGroups, true
}

// HasAccountGroups returns a boolean if a field has been set.
func (o *AccountGroups) HasAccountGroups() bool {
	if o != nil && !core.IsNil(o.AccountGroups) {
		return true
	}

	return false
}

// SetAccountGroups gets a reference to the given []AccountGroupInfo and assigns it to the AccountGroups field.
func (o *AccountGroups) SetAccountGroups(v []AccountGroupInfo) {
	o.AccountGroups = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AccountGroups) GetLinks() SelfLinks {
	if o == nil || core.IsNil(o.Links) {
		var ret SelfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroups) GetLinksOk() (*SelfLinks, bool) {
	if o == nil || core.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AccountGroups) HasLinks() bool {
	if o != nil && !core.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SelfLinks and assigns it to the Links field.
func (o *AccountGroups) SetLinks(v SelfLinks) {
	o.Links = &v
}

func (o AccountGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !core.IsNil(o.AccountGroups) {
		toSerialize["accountGroups"] = o.AccountGroups
	}
	if !core.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableAccountGroups struct {
	value *AccountGroups
	isSet bool
}

func (v NullableAccountGroups) Get() *AccountGroups {
	return v.value
}

func (v *NullableAccountGroups) Set(val *AccountGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountGroups(val *AccountGroups) *NullableAccountGroups {
	return &NullableAccountGroups{value: val, isSet: true}
}

func (v NullableAccountGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


