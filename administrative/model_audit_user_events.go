/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/core"
	"time"
)

// checks if the AuditUserEvents type satisfies the MappedNullable interface at compile time
var _ core.MappedNullable = &AuditUserEvents{}

// AuditUserEvents struct for AuditUserEvents
type AuditUserEvents struct {
	AuditEvents []UserEvent `json:"auditEvents,omitempty"`
	// (Optional) When passing `window` or `startDate` parameter,  the client will also receive the `startDate` field indicating the UTC start date of the data's time range being retrieved  (ISO date-time format).
	StartDate *time.Time `json:"startDate,omitempty"`
	// (Optional) When passing `window` or `endDate` parameter,  the client will also receive the `endDate` field indicating the UTC end date of the data's time range being retrieved  (ISO date-time format).
	EndDate *time.Time `json:"endDate,omitempty"`
	Links *PaginationLinks `json:"_links,omitempty"`
}

// NewAuditUserEvents instantiates a new AuditUserEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditUserEvents() *AuditUserEvents {
	this := AuditUserEvents{}
	return &this
}

// NewAuditUserEventsWithDefaults instantiates a new AuditUserEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditUserEventsWithDefaults() *AuditUserEvents {
	this := AuditUserEvents{}
	return &this
}

// GetAuditEvents returns the AuditEvents field value if set, zero value otherwise.
func (o *AuditUserEvents) GetAuditEvents() []UserEvent {
	if o == nil || core.IsNil(o.AuditEvents) {
		var ret []UserEvent
		return ret
	}
	return o.AuditEvents
}

// GetAuditEventsOk returns a tuple with the AuditEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditUserEvents) GetAuditEventsOk() ([]UserEvent, bool) {
	if o == nil || core.IsNil(o.AuditEvents) {
		return nil, false
	}
	return o.AuditEvents, true
}

// HasAuditEvents returns a boolean if a field has been set.
func (o *AuditUserEvents) HasAuditEvents() bool {
	if o != nil && !core.IsNil(o.AuditEvents) {
		return true
	}

	return false
}

// SetAuditEvents gets a reference to the given []UserEvent and assigns it to the AuditEvents field.
func (o *AuditUserEvents) SetAuditEvents(v []UserEvent) {
	o.AuditEvents = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AuditUserEvents) GetStartDate() time.Time {
	if o == nil || core.IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditUserEvents) GetStartDateOk() (*time.Time, bool) {
	if o == nil || core.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AuditUserEvents) HasStartDate() bool {
	if o != nil && !core.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *AuditUserEvents) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AuditUserEvents) GetEndDate() time.Time {
	if o == nil || core.IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditUserEvents) GetEndDateOk() (*time.Time, bool) {
	if o == nil || core.IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AuditUserEvents) HasEndDate() bool {
	if o != nil && !core.IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *AuditUserEvents) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AuditUserEvents) GetLinks() PaginationLinks {
	if o == nil || core.IsNil(o.Links) {
		var ret PaginationLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditUserEvents) GetLinksOk() (*PaginationLinks, bool) {
	if o == nil || core.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AuditUserEvents) HasLinks() bool {
	if o != nil && !core.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given PaginationLinks and assigns it to the Links field.
func (o *AuditUserEvents) SetLinks(v PaginationLinks) {
	o.Links = &v
}

func (o AuditUserEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditUserEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !core.IsNil(o.AuditEvents) {
		toSerialize["auditEvents"] = o.AuditEvents
	}
	if !core.IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !core.IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !core.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableAuditUserEvents struct {
	value *AuditUserEvents
	isSet bool
}

func (v NullableAuditUserEvents) Get() *AuditUserEvents {
	return v.value
}

func (v *NullableAuditUserEvents) Set(val *AuditUserEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditUserEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditUserEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditUserEvents(val *AuditUserEvents) *NullableAuditUserEvents {
	return &NullableAuditUserEvents{value: val, isSet: true}
}

func (v NullableAuditUserEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditUserEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


