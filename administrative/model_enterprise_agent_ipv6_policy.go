/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
	"fmt"
)

// EnterpriseAgentIpv6Policy IP version policy, (Enterprise Agents and Enterprise Clusters only)
type EnterpriseAgentIpv6Policy string

// List of EnterpriseAgentIpv6Policy
const (
	ENTERPRISEAGENTIPV6POLICY_FORCE_IPV4  EnterpriseAgentIpv6Policy = "force-ipv4"
	ENTERPRISEAGENTIPV6POLICY_PREFER_IPV6 EnterpriseAgentIpv6Policy = "prefer-ipv6"
	ENTERPRISEAGENTIPV6POLICY_FORCE_IPV6  EnterpriseAgentIpv6Policy = "force-ipv6"
)

// All allowed values of EnterpriseAgentIpv6Policy enum
var AllowedEnterpriseAgentIpv6PolicyEnumValues = []EnterpriseAgentIpv6Policy{
	"force-ipv4",
	"prefer-ipv6",
	"force-ipv6",
}

func (v *EnterpriseAgentIpv6Policy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnterpriseAgentIpv6Policy(value)
	for _, existing := range AllowedEnterpriseAgentIpv6PolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnterpriseAgentIpv6Policy", value)
}

// NewEnterpriseAgentIpv6PolicyFromValue returns a pointer to a valid EnterpriseAgentIpv6Policy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnterpriseAgentIpv6PolicyFromValue(v string) (*EnterpriseAgentIpv6Policy, error) {
	ev := EnterpriseAgentIpv6Policy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnterpriseAgentIpv6Policy: valid values are %v", v, AllowedEnterpriseAgentIpv6PolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnterpriseAgentIpv6Policy) IsValid() bool {
	for _, existing := range AllowedEnterpriseAgentIpv6PolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnterpriseAgentIpv6Policy value
func (v EnterpriseAgentIpv6Policy) Ptr() *EnterpriseAgentIpv6Policy {
	return &v
}

type NullableEnterpriseAgentIpv6Policy struct {
	value *EnterpriseAgentIpv6Policy
	isSet bool
}

func (v NullableEnterpriseAgentIpv6Policy) Get() *EnterpriseAgentIpv6Policy {
	return v.value
}

func (v *NullableEnterpriseAgentIpv6Policy) Set(val *EnterpriseAgentIpv6Policy) {
	v.value = val
	v.isSet = true
}

func (v NullableEnterpriseAgentIpv6Policy) IsSet() bool {
	return v.isSet
}

func (v *NullableEnterpriseAgentIpv6Policy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnterpriseAgentIpv6Policy(val *EnterpriseAgentIpv6Policy) *NullableEnterpriseAgentIpv6Policy {
	return &NullableEnterpriseAgentIpv6Policy{value: val, isSet: true}
}

func (v NullableEnterpriseAgentIpv6Policy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnterpriseAgentIpv6Policy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
