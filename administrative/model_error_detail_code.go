/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
	"fmt"
)

// ErrorDetailCode Code for the agent error.
type ErrorDetailCode string

// List of ErrorDetailCode
const (
	ERRORDETAILCODE_AGENT_VERSION_OUTDATED         ErrorDetailCode = "agent-version-outdated"
	ERRORDETAILCODE_BROWSERBOT_VERSION_OUTDATED    ErrorDetailCode = "browserbot-version-outdated"
	ERRORDETAILCODE_APPLIANCE_VERSION_OUTDATED     ErrorDetailCode = "appliance-version-outdated"
	ERRORDETAILCODE_CLOCK_OFFSET                   ErrorDetailCode = "clock-offset"
	ERRORDETAILCODE_OS_END_OF_INSTALLATION_SUPPORT ErrorDetailCode = "os-end-of-installation-support"
	ERRORDETAILCODE_OS_END_OF_SUPPORT              ErrorDetailCode = "os-end-of-support"
	ERRORDETAILCODE_OS_END_OF_LIFE                 ErrorDetailCode = "os-end-of-life"
	ERRORDETAILCODE_NAT_TRAVERSAL_ERROR            ErrorDetailCode = "nat-traversal-error"
)

// All allowed values of ErrorDetailCode enum
var AllowedErrorDetailCodeEnumValues = []ErrorDetailCode{
	"agent-version-outdated",
	"browserbot-version-outdated",
	"appliance-version-outdated",
	"clock-offset",
	"os-end-of-installation-support",
	"os-end-of-support",
	"os-end-of-life",
	"nat-traversal-error",
}

func (v *ErrorDetailCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorDetailCode(value)
	for _, existing := range AllowedErrorDetailCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorDetailCode", value)
}

// NewErrorDetailCodeFromValue returns a pointer to a valid ErrorDetailCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorDetailCodeFromValue(v string) (*ErrorDetailCode, error) {
	ev := ErrorDetailCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorDetailCode: valid values are %v", v, AllowedErrorDetailCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorDetailCode) IsValid() bool {
	for _, existing := range AllowedErrorDetailCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorDetailCode value
func (v ErrorDetailCode) Ptr() *ErrorDetailCode {
	return &v
}

type NullableErrorDetailCode struct {
	value *ErrorDetailCode
	isSet bool
}

func (v NullableErrorDetailCode) Get() *ErrorDetailCode {
	return v.value
}

func (v *NullableErrorDetailCode) Set(val *ErrorDetailCode) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorDetailCode) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorDetailCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorDetailCode(val *ErrorDetailCode) *NullableErrorDetailCode {
	return &NullableErrorDetailCode{value: val, isSet: true}
}

func (v NullableErrorDetailCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorDetailCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
