/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/core"
	"time"
)

// checks if the ExtendedUser type satisfies the MappedNullable interface at compile time
var _ core.MappedNullable = &ExtendedUser{}

// ExtendedUser struct for ExtendedUser
type ExtendedUser struct {
	// User's display name.
	Name *string `json:"name,omitempty"`
	// User's email address.
	Email *string `json:"email,omitempty"`
	// Unique ID of the user.
	Uid *string `json:"uid,omitempty"`
	// UTC date the user registered their account (ISO date-time format).
	DateRegistered *time.Time `json:"dateRegistered,omitempty"`
	LoginAccountGroup *AccountGroup `json:"loginAccountGroup,omitempty"`
	// UTC last login of the user (ISO date-time format).
	LastLogin *time.Time `json:"lastLogin,omitempty"`
}

// NewExtendedUser instantiates a new ExtendedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedUser() *ExtendedUser {
	this := ExtendedUser{}
	return &this
}

// NewExtendedUserWithDefaults instantiates a new ExtendedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedUserWithDefaults() *ExtendedUser {
	this := ExtendedUser{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExtendedUser) GetName() string {
	if o == nil || core.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUser) GetNameOk() (*string, bool) {
	if o == nil || core.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExtendedUser) HasName() bool {
	if o != nil && !core.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExtendedUser) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ExtendedUser) GetEmail() string {
	if o == nil || core.IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUser) GetEmailOk() (*string, bool) {
	if o == nil || core.IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ExtendedUser) HasEmail() bool {
	if o != nil && !core.IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ExtendedUser) SetEmail(v string) {
	o.Email = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *ExtendedUser) GetUid() string {
	if o == nil || core.IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUser) GetUidOk() (*string, bool) {
	if o == nil || core.IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *ExtendedUser) HasUid() bool {
	if o != nil && !core.IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *ExtendedUser) SetUid(v string) {
	o.Uid = &v
}

// GetDateRegistered returns the DateRegistered field value if set, zero value otherwise.
func (o *ExtendedUser) GetDateRegistered() time.Time {
	if o == nil || core.IsNil(o.DateRegistered) {
		var ret time.Time
		return ret
	}
	return *o.DateRegistered
}

// GetDateRegisteredOk returns a tuple with the DateRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUser) GetDateRegisteredOk() (*time.Time, bool) {
	if o == nil || core.IsNil(o.DateRegistered) {
		return nil, false
	}
	return o.DateRegistered, true
}

// HasDateRegistered returns a boolean if a field has been set.
func (o *ExtendedUser) HasDateRegistered() bool {
	if o != nil && !core.IsNil(o.DateRegistered) {
		return true
	}

	return false
}

// SetDateRegistered gets a reference to the given time.Time and assigns it to the DateRegistered field.
func (o *ExtendedUser) SetDateRegistered(v time.Time) {
	o.DateRegistered = &v
}

// GetLoginAccountGroup returns the LoginAccountGroup field value if set, zero value otherwise.
func (o *ExtendedUser) GetLoginAccountGroup() AccountGroup {
	if o == nil || core.IsNil(o.LoginAccountGroup) {
		var ret AccountGroup
		return ret
	}
	return *o.LoginAccountGroup
}

// GetLoginAccountGroupOk returns a tuple with the LoginAccountGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUser) GetLoginAccountGroupOk() (*AccountGroup, bool) {
	if o == nil || core.IsNil(o.LoginAccountGroup) {
		return nil, false
	}
	return o.LoginAccountGroup, true
}

// HasLoginAccountGroup returns a boolean if a field has been set.
func (o *ExtendedUser) HasLoginAccountGroup() bool {
	if o != nil && !core.IsNil(o.LoginAccountGroup) {
		return true
	}

	return false
}

// SetLoginAccountGroup gets a reference to the given AccountGroup and assigns it to the LoginAccountGroup field.
func (o *ExtendedUser) SetLoginAccountGroup(v AccountGroup) {
	o.LoginAccountGroup = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *ExtendedUser) GetLastLogin() time.Time {
	if o == nil || core.IsNil(o.LastLogin) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUser) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || core.IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *ExtendedUser) HasLastLogin() bool {
	if o != nil && !core.IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *ExtendedUser) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

func (o ExtendedUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !core.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !core.IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !core.IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !core.IsNil(o.DateRegistered) {
		toSerialize["dateRegistered"] = o.DateRegistered
	}
	if !core.IsNil(o.LoginAccountGroup) {
		toSerialize["loginAccountGroup"] = o.LoginAccountGroup
	}
	if !core.IsNil(o.LastLogin) {
		toSerialize["lastLogin"] = o.LastLogin
	}
	return toSerialize, nil
}

type NullableExtendedUser struct {
	value *ExtendedUser
	isSet bool
}

func (v NullableExtendedUser) Get() *ExtendedUser {
	return v.value
}

func (v *NullableExtendedUser) Set(val *ExtendedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedUser(val *ExtendedUser) *NullableExtendedUser {
	return &NullableExtendedUser{value: val, isSet: true}
}

func (v NullableExtendedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


