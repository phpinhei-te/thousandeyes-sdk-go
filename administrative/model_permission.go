/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Permission type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Permission{}

// Permission struct for Permission
type Permission struct {
	// Label corresponding to the permission.
	Label *string `json:"label,omitempty"`
	// Unique ID representing the permission.
	PermissionId *string `json:"permissionId,omitempty"`
	// Flag indicating whether the permission is classified as a management permission.
	IsManagementPermission *bool `json:"isManagementPermission,omitempty"`
	// Permission name
	Permission *string `json:"permission,omitempty"`
}

// NewPermission instantiates a new Permission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermission() *Permission {
	this := Permission{}
	return &this
}

// NewPermissionWithDefaults instantiates a new Permission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionWithDefaults() *Permission {
	this := Permission{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Permission) GetLabel() string {
	if o == nil || utils.IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetLabelOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Permission) HasLabel() bool {
	if o != nil && !utils.IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Permission) SetLabel(v string) {
	o.Label = &v
}

// GetPermissionId returns the PermissionId field value if set, zero value otherwise.
func (o *Permission) GetPermissionId() string {
	if o == nil || utils.IsNil(o.PermissionId) {
		var ret string
		return ret
	}
	return *o.PermissionId
}

// GetPermissionIdOk returns a tuple with the PermissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetPermissionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PermissionId) {
		return nil, false
	}
	return o.PermissionId, true
}

// HasPermissionId returns a boolean if a field has been set.
func (o *Permission) HasPermissionId() bool {
	if o != nil && !utils.IsNil(o.PermissionId) {
		return true
	}

	return false
}

// SetPermissionId gets a reference to the given string and assigns it to the PermissionId field.
func (o *Permission) SetPermissionId(v string) {
	o.PermissionId = &v
}

// GetIsManagementPermission returns the IsManagementPermission field value if set, zero value otherwise.
func (o *Permission) GetIsManagementPermission() bool {
	if o == nil || utils.IsNil(o.IsManagementPermission) {
		var ret bool
		return ret
	}
	return *o.IsManagementPermission
}

// GetIsManagementPermissionOk returns a tuple with the IsManagementPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetIsManagementPermissionOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsManagementPermission) {
		return nil, false
	}
	return o.IsManagementPermission, true
}

// HasIsManagementPermission returns a boolean if a field has been set.
func (o *Permission) HasIsManagementPermission() bool {
	if o != nil && !utils.IsNil(o.IsManagementPermission) {
		return true
	}

	return false
}

// SetIsManagementPermission gets a reference to the given bool and assigns it to the IsManagementPermission field.
func (o *Permission) SetIsManagementPermission(v bool) {
	o.IsManagementPermission = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *Permission) GetPermission() string {
	if o == nil || utils.IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetPermissionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *Permission) HasPermission() bool {
	if o != nil && !utils.IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *Permission) SetPermission(v string) {
	o.Permission = &v
}

func (o Permission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Permission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !utils.IsNil(o.PermissionId) {
		toSerialize["permissionId"] = o.PermissionId
	}
	if !utils.IsNil(o.IsManagementPermission) {
		toSerialize["isManagementPermission"] = o.IsManagementPermission
	}
	if !utils.IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	return toSerialize, nil
}

type NullablePermission struct {
	value *Permission
	isSet bool
}

func (v NullablePermission) Get() *Permission {
	return v.value
}

func (v *NullablePermission) Set(val *Permission) {
	v.value = val
	v.isSet = true
}

func (v NullablePermission) IsSet() bool {
	return v.isSet
}

func (v *NullablePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermission(val *Permission) *NullablePermission {
	return &NullablePermission{value: val, isSet: true}
}

func (v NullablePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
