/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the RoleRequestBody type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RoleRequestBody{}

// RoleRequestBody struct for RoleRequestBody
type RoleRequestBody struct {
	// Name of the role.
	Name *string `json:"name,omitempty"`
	// Contains list of test permission IDs (get `permissionId` from `/permissions` operation)
	Permissions []string `json:"permissions,omitempty"`
}

// NewRoleRequestBody instantiates a new RoleRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleRequestBody() *RoleRequestBody {
	this := RoleRequestBody{}
	return &this
}

// NewRoleRequestBodyWithDefaults instantiates a new RoleRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleRequestBodyWithDefaults() *RoleRequestBody {
	this := RoleRequestBody{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleRequestBody) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleRequestBody) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleRequestBody) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleRequestBody) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RoleRequestBody) GetPermissions() []string {
	if o == nil || utils.IsNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleRequestBody) GetPermissionsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RoleRequestBody) HasPermissions() bool {
	if o != nil && !utils.IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *RoleRequestBody) SetPermissions(v []string) {
	o.Permissions = v
}

func (o RoleRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableRoleRequestBody struct {
	value *RoleRequestBody
	isSet bool
}

func (v NullableRoleRequestBody) Get() *RoleRequestBody {
	return v.value
}

func (v *NullableRoleRequestBody) Set(val *RoleRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleRequestBody(val *RoleRequestBody) *NullableRoleRequestBody {
	return &NullableRoleRequestBody{value: val, isSet: true}
}

func (v NullableRoleRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
