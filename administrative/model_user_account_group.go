/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the UserAccountGroup type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UserAccountGroup{}

// UserAccountGroup struct for UserAccountGroup
type UserAccountGroup struct {
	// User's display name.
	Name *string `json:"name,omitempty"`
	// User's email address.
	Email *string `json:"email,omitempty"`
	// Unique ID representing the user.
	Uid *string `json:"uid,omitempty"`
	// User's UTC last login date (ISO date-time format).
	LastLogin *time.Time `json:"lastLogin,omitempty"`
	// User's UTC registration date (ISO date-time format).
	DateRegistered *time.Time `json:"dateRegistered,omitempty"`
	Roles          []Role     `json:"roles,omitempty"`
}

// NewUserAccountGroup instantiates a new UserAccountGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccountGroup() *UserAccountGroup {
	this := UserAccountGroup{}
	return &this
}

// NewUserAccountGroupWithDefaults instantiates a new UserAccountGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountGroupWithDefaults() *UserAccountGroup {
	this := UserAccountGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserAccountGroup) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroup) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserAccountGroup) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserAccountGroup) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserAccountGroup) GetEmail() string {
	if o == nil || utils.IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroup) GetEmailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserAccountGroup) HasEmail() bool {
	if o != nil && !utils.IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserAccountGroup) SetEmail(v string) {
	o.Email = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UserAccountGroup) GetUid() string {
	if o == nil || utils.IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroup) GetUidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UserAccountGroup) HasUid() bool {
	if o != nil && !utils.IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UserAccountGroup) SetUid(v string) {
	o.Uid = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *UserAccountGroup) GetLastLogin() time.Time {
	if o == nil || utils.IsNil(o.LastLogin) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroup) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *UserAccountGroup) HasLastLogin() bool {
	if o != nil && !utils.IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *UserAccountGroup) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

// GetDateRegistered returns the DateRegistered field value if set, zero value otherwise.
func (o *UserAccountGroup) GetDateRegistered() time.Time {
	if o == nil || utils.IsNil(o.DateRegistered) {
		var ret time.Time
		return ret
	}
	return *o.DateRegistered
}

// GetDateRegisteredOk returns a tuple with the DateRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroup) GetDateRegisteredOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.DateRegistered) {
		return nil, false
	}
	return o.DateRegistered, true
}

// HasDateRegistered returns a boolean if a field has been set.
func (o *UserAccountGroup) HasDateRegistered() bool {
	if o != nil && !utils.IsNil(o.DateRegistered) {
		return true
	}

	return false
}

// SetDateRegistered gets a reference to the given time.Time and assigns it to the DateRegistered field.
func (o *UserAccountGroup) SetDateRegistered(v time.Time) {
	o.DateRegistered = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UserAccountGroup) GetRoles() []Role {
	if o == nil || utils.IsNil(o.Roles) {
		var ret []Role
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroup) GetRolesOk() ([]Role, bool) {
	if o == nil || utils.IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserAccountGroup) HasRoles() bool {
	if o != nil && !utils.IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *UserAccountGroup) SetRoles(v []Role) {
	o.Roles = v
}

func (o UserAccountGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccountGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !utils.IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !utils.IsNil(o.LastLogin) {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if !utils.IsNil(o.DateRegistered) {
		toSerialize["dateRegistered"] = o.DateRegistered
	}
	if !utils.IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableUserAccountGroup struct {
	value *UserAccountGroup
	isSet bool
}

func (v NullableUserAccountGroup) Get() *UserAccountGroup {
	return v.value
}

func (v *NullableUserAccountGroup) Set(val *UserAccountGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountGroup(val *UserAccountGroup) *NullableUserAccountGroup {
	return &NullableUserAccountGroup{value: val, isSet: true}
}

func (v NullableUserAccountGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
