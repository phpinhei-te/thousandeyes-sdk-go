/*
Administrative API

Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package administrative

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/core"
)

// checks if the UserAccountGroupRole type satisfies the MappedNullable interface at compile time
var _ core.MappedNullable = &UserAccountGroupRole{}

// UserAccountGroupRole struct for UserAccountGroupRole
type UserAccountGroupRole struct {
	// Unique ID of the account group.
	AccountGroupId *string `json:"accountGroupId,omitempty"`
	// Unique role IDs.
	RoleIds []string `json:"roleIds,omitempty"`
}

// NewUserAccountGroupRole instantiates a new UserAccountGroupRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccountGroupRole() *UserAccountGroupRole {
	this := UserAccountGroupRole{}
	return &this
}

// NewUserAccountGroupRoleWithDefaults instantiates a new UserAccountGroupRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountGroupRoleWithDefaults() *UserAccountGroupRole {
	this := UserAccountGroupRole{}
	return &this
}

// GetAccountGroupId returns the AccountGroupId field value if set, zero value otherwise.
func (o *UserAccountGroupRole) GetAccountGroupId() string {
	if o == nil || core.IsNil(o.AccountGroupId) {
		var ret string
		return ret
	}
	return *o.AccountGroupId
}

// GetAccountGroupIdOk returns a tuple with the AccountGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroupRole) GetAccountGroupIdOk() (*string, bool) {
	if o == nil || core.IsNil(o.AccountGroupId) {
		return nil, false
	}
	return o.AccountGroupId, true
}

// HasAccountGroupId returns a boolean if a field has been set.
func (o *UserAccountGroupRole) HasAccountGroupId() bool {
	if o != nil && !core.IsNil(o.AccountGroupId) {
		return true
	}

	return false
}

// SetAccountGroupId gets a reference to the given string and assigns it to the AccountGroupId field.
func (o *UserAccountGroupRole) SetAccountGroupId(v string) {
	o.AccountGroupId = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *UserAccountGroupRole) GetRoleIds() []string {
	if o == nil || core.IsNil(o.RoleIds) {
		var ret []string
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountGroupRole) GetRoleIdsOk() ([]string, bool) {
	if o == nil || core.IsNil(o.RoleIds) {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *UserAccountGroupRole) HasRoleIds() bool {
	if o != nil && !core.IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []string and assigns it to the RoleIds field.
func (o *UserAccountGroupRole) SetRoleIds(v []string) {
	o.RoleIds = v
}

func (o UserAccountGroupRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccountGroupRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !core.IsNil(o.AccountGroupId) {
		toSerialize["accountGroupId"] = o.AccountGroupId
	}
	if !core.IsNil(o.RoleIds) {
		toSerialize["roleIds"] = o.RoleIds
	}
	return toSerialize, nil
}

type NullableUserAccountGroupRole struct {
	value *UserAccountGroupRole
	isSet bool
}

func (v NullableUserAccountGroupRole) Get() *UserAccountGroupRole {
	return v.value
}

func (v *NullableUserAccountGroupRole) Set(val *UserAccountGroupRole) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountGroupRole) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountGroupRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountGroupRole(val *UserAccountGroupRole) *NullableUserAccountGroupRole {
	return &NullableUserAccountGroupRole{value: val, isSet: true}
}

func (v NullableUserAccountGroupRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountGroupRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


