/*
Emulation API

The Emulation API facilitates the retrieval of user-agent strings for HTTP, pageload, and transaction tests. It also enables the retrieval and addition of emulated devices for pageload and transaction tests.  To access Emulation API operations, the following permissions are required:  * `Settings Tests Read` for read operations. * `Settings Tests Update` for write operations. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emulation

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/core"
	"bytes"
	"fmt"
)

// checks if the EmulatedDevice type satisfies the MappedNullable interface at compile time
var _ core.MappedNullable = &EmulatedDevice{}

// EmulatedDevice struct for EmulatedDevice
type EmulatedDevice struct {
	Category EmulatedDeviceCategory `json:"category"`
	// The width of the display of the emulated device.
	Width int32 `json:"width"`
	// The height of the display of the emulated device.
	Height int32 `json:"height"`
}

type _EmulatedDevice EmulatedDevice

// NewEmulatedDevice instantiates a new EmulatedDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmulatedDevice(category EmulatedDeviceCategory, width int32, height int32) *EmulatedDevice {
	this := EmulatedDevice{}
	this.Category = category
	this.Width = width
	this.Height = height
	return &this
}

// NewEmulatedDeviceWithDefaults instantiates a new EmulatedDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmulatedDeviceWithDefaults() *EmulatedDevice {
	this := EmulatedDevice{}
	return &this
}

// GetCategory returns the Category field value
func (o *EmulatedDevice) GetCategory() EmulatedDeviceCategory {
	if o == nil {
		var ret EmulatedDeviceCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *EmulatedDevice) GetCategoryOk() (*EmulatedDeviceCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *EmulatedDevice) SetCategory(v EmulatedDeviceCategory) {
	o.Category = v
}

// GetWidth returns the Width field value
func (o *EmulatedDevice) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *EmulatedDevice) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *EmulatedDevice) SetWidth(v int32) {
	o.Width = v
}

// GetHeight returns the Height field value
func (o *EmulatedDevice) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *EmulatedDevice) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *EmulatedDevice) SetHeight(v int32) {
	o.Height = v
}

func (o EmulatedDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmulatedDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["width"] = o.Width
	toSerialize["height"] = o.Height
	return toSerialize, nil
}

func (o *EmulatedDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"width",
		"height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmulatedDevice := _EmulatedDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmulatedDevice)

	if err != nil {
		return err
	}

	*o = EmulatedDevice(varEmulatedDevice)

	return err
}

type NullableEmulatedDevice struct {
	value *EmulatedDevice
	isSet bool
}

func (v NullableEmulatedDevice) Get() *EmulatedDevice {
	return v.value
}

func (v *NullableEmulatedDevice) Set(val *EmulatedDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableEmulatedDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableEmulatedDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmulatedDevice(val *EmulatedDevice) *NullableEmulatedDevice {
	return &NullableEmulatedDevice{value: val, isSet: true}
}

func (v NullableEmulatedDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmulatedDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


