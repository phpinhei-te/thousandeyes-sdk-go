/*
Emulation API

The Emulation API facilitates the retrieval of user-agent strings for HTTP, pageload, and transaction tests. It also enables the retrieval and addition of emulated devices for pageload and transaction tests.  To access Emulation API operations, the following permissions are required:  * `Settings Tests Read` for read operations. * `Settings Tests Update` for write operations.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emulation

import (
	"encoding/json"
	"fmt"
)

// ExpandEmulatedDeviceOptions the model 'ExpandEmulatedDeviceOptions'
type ExpandEmulatedDeviceOptions string

// List of ExpandEmulatedDeviceOptions
const (
	EXPANDEMULATEDDEVICEOPTIONS_USER_AGENT ExpandEmulatedDeviceOptions = "user-agent"
)

// All allowed values of ExpandEmulatedDeviceOptions enum
var AllowedExpandEmulatedDeviceOptionsEnumValues = []ExpandEmulatedDeviceOptions{
	"user-agent",
}

func (v *ExpandEmulatedDeviceOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpandEmulatedDeviceOptions(value)
	for _, existing := range AllowedExpandEmulatedDeviceOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpandEmulatedDeviceOptions", value)
}

// NewExpandEmulatedDeviceOptionsFromValue returns a pointer to a valid ExpandEmulatedDeviceOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpandEmulatedDeviceOptionsFromValue(v string) (*ExpandEmulatedDeviceOptions, error) {
	ev := ExpandEmulatedDeviceOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpandEmulatedDeviceOptions: valid values are %v", v, AllowedExpandEmulatedDeviceOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpandEmulatedDeviceOptions) IsValid() bool {
	for _, existing := range AllowedExpandEmulatedDeviceOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpandEmulatedDeviceOptions value
func (v ExpandEmulatedDeviceOptions) Ptr() *ExpandEmulatedDeviceOptions {
	return &v
}

type NullableExpandEmulatedDeviceOptions struct {
	value *ExpandEmulatedDeviceOptions
	isSet bool
}

func (v NullableExpandEmulatedDeviceOptions) Get() *ExpandEmulatedDeviceOptions {
	return v.value
}

func (v *NullableExpandEmulatedDeviceOptions) Set(val *ExpandEmulatedDeviceOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandEmulatedDeviceOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandEmulatedDeviceOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandEmulatedDeviceOptions(val *ExpandEmulatedDeviceOptions) *NullableExpandEmulatedDeviceOptions {
	return &NullableExpandEmulatedDeviceOptions{value: val, isSet: true}
}

func (v NullableExpandEmulatedDeviceOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandEmulatedDeviceOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
