/*
Emulation API

The Emulation API facilitates the retrieval of user-agent strings for HTTP, pageload, and transaction tests. It also enables the retrieval and addition of emulated devices for pageload and transaction tests.  To access Emulation API operations, the following permissions are required:  * `Settings Tests Read` for read operations. * `Settings Tests Update` for write operations.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emulation

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the UserAgent type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UserAgent{}

// UserAgent struct for UserAgent
type UserAgent struct {
	// The name of the web browser.
	Browser *string `json:"browser,omitempty"`
	// The operating system for the user-agent HTTP header.
	Os *string `json:"os,omitempty"`
	// The text of the user-agent header.
	Value *string `json:"value,omitempty"`
}

// NewUserAgent instantiates a new UserAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAgent() *UserAgent {
	this := UserAgent{}
	return &this
}

// NewUserAgentWithDefaults instantiates a new UserAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAgentWithDefaults() *UserAgent {
	this := UserAgent{}
	return &this
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *UserAgent) GetBrowser() string {
	if o == nil || utils.IsNil(o.Browser) {
		var ret string
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetBrowserOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Browser) {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *UserAgent) HasBrowser() bool {
	if o != nil && !utils.IsNil(o.Browser) {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given string and assigns it to the Browser field.
func (o *UserAgent) SetBrowser(v string) {
	o.Browser = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *UserAgent) GetOs() string {
	if o == nil || utils.IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetOsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *UserAgent) HasOs() bool {
	if o != nil && !utils.IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *UserAgent) SetOs(v string) {
	o.Os = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UserAgent) GetValue() string {
	if o == nil || utils.IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UserAgent) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UserAgent) SetValue(v string) {
	o.Value = &v
}

func (o UserAgent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Browser) {
		toSerialize["browser"] = o.Browser
	}
	if !utils.IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !utils.IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableUserAgent struct {
	value *UserAgent
	isSet bool
}

func (v NullableUserAgent) Get() *UserAgent {
	return v.value
}

func (v *NullableUserAgent) Set(val *UserAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAgent(val *UserAgent) *NullableUserAgent {
	return &NullableUserAgent{value: val, isSet: true}
}

func (v NullableUserAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
