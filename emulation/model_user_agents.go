/*
Emulation API

The Emulation API facilitates the retrieval of user-agent strings for HTTP, pageload, and transaction tests. It also enables the retrieval and addition of emulated devices for pageload and transaction tests.  To access Emulation API operations, the following permissions are required:  * `Settings Tests Read` for read operations. * `Settings Tests Update` for write operations. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emulation

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/core"
)

// checks if the UserAgents type satisfies the MappedNullable interface at compile time
var _ core.MappedNullable = &UserAgents{}

// UserAgents struct for UserAgents
type UserAgents struct {
	UserAgents []UserAgent `json:"userAgents,omitempty"`
	Links *SelfLinks `json:"_links,omitempty"`
}

// NewUserAgents instantiates a new UserAgents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAgents() *UserAgents {
	this := UserAgents{}
	return &this
}

// NewUserAgentsWithDefaults instantiates a new UserAgents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAgentsWithDefaults() *UserAgents {
	this := UserAgents{}
	return &this
}

// GetUserAgents returns the UserAgents field value if set, zero value otherwise.
func (o *UserAgents) GetUserAgents() []UserAgent {
	if o == nil || core.IsNil(o.UserAgents) {
		var ret []UserAgent
		return ret
	}
	return o.UserAgents
}

// GetUserAgentsOk returns a tuple with the UserAgents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgents) GetUserAgentsOk() ([]UserAgent, bool) {
	if o == nil || core.IsNil(o.UserAgents) {
		return nil, false
	}
	return o.UserAgents, true
}

// HasUserAgents returns a boolean if a field has been set.
func (o *UserAgents) HasUserAgents() bool {
	if o != nil && !core.IsNil(o.UserAgents) {
		return true
	}

	return false
}

// SetUserAgents gets a reference to the given []UserAgent and assigns it to the UserAgents field.
func (o *UserAgents) SetUserAgents(v []UserAgent) {
	o.UserAgents = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UserAgents) GetLinks() SelfLinks {
	if o == nil || core.IsNil(o.Links) {
		var ret SelfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgents) GetLinksOk() (*SelfLinks, bool) {
	if o == nil || core.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UserAgents) HasLinks() bool {
	if o != nil && !core.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SelfLinks and assigns it to the Links field.
func (o *UserAgents) SetLinks(v SelfLinks) {
	o.Links = &v
}

func (o UserAgents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAgents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !core.IsNil(o.UserAgents) {
		toSerialize["userAgents"] = o.UserAgents
	}
	if !core.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableUserAgents struct {
	value *UserAgents
	isSet bool
}

func (v NullableUserAgents) Get() *UserAgents {
	return v.value
}

func (v *NullableUserAgents) Set(val *UserAgents) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAgents) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAgents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAgents(val *UserAgents) *NullableUserAgents {
	return &NullableUserAgents{value: val, isSet: true}
}

func (v NullableUserAgents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAgents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


