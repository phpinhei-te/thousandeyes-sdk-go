/*
Event Detection API

 Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventdetection

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ApiAffectedTarget type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiAffectedTarget{}

// ApiAffectedTarget struct for ApiAffectedTarget
type ApiAffectedTarget struct {
	// The ID of the target server.
	ServerId *string `json:"serverId,omitempty"`
	// The target name as configured in the test settings.
	Name *string `json:"name,omitempty"`
	// The target server IP resolved by the agent. Depending on the failure type, the IP may not be present. For example, if the agent failed to resolve it or if the requests were routed through the proxy.
	Ip *string `json:"ip,omitempty"`
	// An array of unique test IDs that contributed data points which generated the signal for the event.
	AffectedTestIds []string `json:"affectedTestIds,omitempty"`
	// An array of unique agent IDs that contributed data points which generated the signal for the event.
	AffectedAgentIds []string `json:"affectedAgentIds,omitempty"`
}

// NewApiAffectedTarget instantiates a new ApiAffectedTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAffectedTarget() *ApiAffectedTarget {
	this := ApiAffectedTarget{}
	return &this
}

// NewApiAffectedTargetWithDefaults instantiates a new ApiAffectedTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAffectedTargetWithDefaults() *ApiAffectedTarget {
	this := ApiAffectedTarget{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ApiAffectedTarget) GetServerId() string {
	if o == nil || utils.IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAffectedTarget) GetServerIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ApiAffectedTarget) HasServerId() bool {
	if o != nil && !utils.IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *ApiAffectedTarget) SetServerId(v string) {
	o.ServerId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiAffectedTarget) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAffectedTarget) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiAffectedTarget) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiAffectedTarget) SetName(v string) {
	o.Name = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *ApiAffectedTarget) GetIp() string {
	if o == nil || utils.IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAffectedTarget) GetIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *ApiAffectedTarget) HasIp() bool {
	if o != nil && !utils.IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *ApiAffectedTarget) SetIp(v string) {
	o.Ip = &v
}

// GetAffectedTestIds returns the AffectedTestIds field value if set, zero value otherwise.
func (o *ApiAffectedTarget) GetAffectedTestIds() []string {
	if o == nil || utils.IsNil(o.AffectedTestIds) {
		var ret []string
		return ret
	}
	return o.AffectedTestIds
}

// GetAffectedTestIdsOk returns a tuple with the AffectedTestIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAffectedTarget) GetAffectedTestIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AffectedTestIds) {
		return nil, false
	}
	return o.AffectedTestIds, true
}

// HasAffectedTestIds returns a boolean if a field has been set.
func (o *ApiAffectedTarget) HasAffectedTestIds() bool {
	if o != nil && !utils.IsNil(o.AffectedTestIds) {
		return true
	}

	return false
}

// SetAffectedTestIds gets a reference to the given []string and assigns it to the AffectedTestIds field.
func (o *ApiAffectedTarget) SetAffectedTestIds(v []string) {
	o.AffectedTestIds = v
}

// GetAffectedAgentIds returns the AffectedAgentIds field value if set, zero value otherwise.
func (o *ApiAffectedTarget) GetAffectedAgentIds() []string {
	if o == nil || utils.IsNil(o.AffectedAgentIds) {
		var ret []string
		return ret
	}
	return o.AffectedAgentIds
}

// GetAffectedAgentIdsOk returns a tuple with the AffectedAgentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAffectedTarget) GetAffectedAgentIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AffectedAgentIds) {
		return nil, false
	}
	return o.AffectedAgentIds, true
}

// HasAffectedAgentIds returns a boolean if a field has been set.
func (o *ApiAffectedTarget) HasAffectedAgentIds() bool {
	if o != nil && !utils.IsNil(o.AffectedAgentIds) {
		return true
	}

	return false
}

// SetAffectedAgentIds gets a reference to the given []string and assigns it to the AffectedAgentIds field.
func (o *ApiAffectedTarget) SetAffectedAgentIds(v []string) {
	o.AffectedAgentIds = v
}

func (o ApiAffectedTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAffectedTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !utils.IsNil(o.AffectedTestIds) {
		toSerialize["affectedTestIds"] = o.AffectedTestIds
	}
	if !utils.IsNil(o.AffectedAgentIds) {
		toSerialize["affectedAgentIds"] = o.AffectedAgentIds
	}
	return toSerialize, nil
}

type NullableApiAffectedTarget struct {
	value *ApiAffectedTarget
	isSet bool
}

func (v NullableApiAffectedTarget) Get() *ApiAffectedTarget {
	return v.value
}

func (v *NullableApiAffectedTarget) Set(val *ApiAffectedTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAffectedTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAffectedTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAffectedTarget(val *ApiAffectedTarget) *NullableApiAffectedTarget {
	return &NullableApiAffectedTarget{value: val, isSet: true}
}

func (v NullableApiAffectedTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAffectedTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
