/*
Event Detection API

 Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventdetection

import (
	"encoding/json"
	"fmt"
)

// EventAlertSeverity The severity of the alert.
type EventAlertSeverity string

// List of EventAlertSeverity
const (
	EVENTALERTSEVERITY_HIGH   EventAlertSeverity = "high"
	EVENTALERTSEVERITY_MEDIUM EventAlertSeverity = "medium"
	EVENTALERTSEVERITY_LOW    EventAlertSeverity = "low"
)

// All allowed values of EventAlertSeverity enum
var AllowedEventAlertSeverityEnumValues = []EventAlertSeverity{
	"high",
	"medium",
	"low",
}

func (v *EventAlertSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventAlertSeverity(value)
	for _, existing := range AllowedEventAlertSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventAlertSeverity", value)
}

// NewEventAlertSeverityFromValue returns a pointer to a valid EventAlertSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventAlertSeverityFromValue(v string) (*EventAlertSeverity, error) {
	ev := EventAlertSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventAlertSeverity: valid values are %v", v, AllowedEventAlertSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventAlertSeverity) IsValid() bool {
	for _, existing := range AllowedEventAlertSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventAlertSeverity value
func (v EventAlertSeverity) Ptr() *EventAlertSeverity {
	return &v
}

type NullableEventAlertSeverity struct {
	value *EventAlertSeverity
	isSet bool
}

func (v NullableEventAlertSeverity) Get() *EventAlertSeverity {
	return v.value
}

func (v *NullableEventAlertSeverity) Set(val *EventAlertSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAlertSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAlertSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAlertSeverity(val *EventAlertSeverity) *NullableEventAlertSeverity {
	return &NullableEventAlertSeverity{value: val, isSet: true}
}

func (v NullableEventAlertSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAlertSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
