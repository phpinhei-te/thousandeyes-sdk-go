/*
Event Detection API

 Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventdetection

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the EventApiAffectedAgent type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EventApiAffectedAgent{}

// EventApiAffectedAgent struct for EventApiAffectedAgent
type EventApiAffectedAgent struct {
	// The ID of the virtual agent.
	AgentId *string                   `json:"agentId,omitempty"`
	Type    *CloudEnterpriseAgentType `json:"type,omitempty"`
	// The name of the agent as defined in settings.
	Name *string `json:"name,omitempty"`
	// The name of the agent's location.
	Location *string `json:"location,omitempty"`
	// The country code of the agent's location .
	CountryCode *string `json:"countryCode,omitempty"`
	// An array of unique target IDs that contributed data points which generated the signal for the event.
	AffectedTargetIds []string `json:"affectedTargetIds,omitempty"`
	// An array of unique agent IDs that contributed data points which generated the signal for the event.
	AffectedTestIds []string    `json:"affectedTestIds,omitempty"`
	Links           *AgentLinks `json:"_links,omitempty"`
}

// NewEventApiAffectedAgent instantiates a new EventApiAffectedAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventApiAffectedAgent() *EventApiAffectedAgent {
	this := EventApiAffectedAgent{}
	return &this
}

// NewEventApiAffectedAgentWithDefaults instantiates a new EventApiAffectedAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventApiAffectedAgentWithDefaults() *EventApiAffectedAgent {
	this := EventApiAffectedAgent{}
	return &this
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetAgentId() string {
	if o == nil || utils.IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetAgentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasAgentId() bool {
	if o != nil && !utils.IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *EventApiAffectedAgent) SetAgentId(v string) {
	o.AgentId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetType() CloudEnterpriseAgentType {
	if o == nil || utils.IsNil(o.Type) {
		var ret CloudEnterpriseAgentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetTypeOk() (*CloudEnterpriseAgentType, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CloudEnterpriseAgentType and assigns it to the Type field.
func (o *EventApiAffectedAgent) SetType(v CloudEnterpriseAgentType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventApiAffectedAgent) SetName(v string) {
	o.Name = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetLocation() string {
	if o == nil || utils.IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetLocationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasLocation() bool {
	if o != nil && !utils.IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *EventApiAffectedAgent) SetLocation(v string) {
	o.Location = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetCountryCode() string {
	if o == nil || utils.IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetCountryCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasCountryCode() bool {
	if o != nil && !utils.IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *EventApiAffectedAgent) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetAffectedTargetIds returns the AffectedTargetIds field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetAffectedTargetIds() []string {
	if o == nil || utils.IsNil(o.AffectedTargetIds) {
		var ret []string
		return ret
	}
	return o.AffectedTargetIds
}

// GetAffectedTargetIdsOk returns a tuple with the AffectedTargetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetAffectedTargetIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AffectedTargetIds) {
		return nil, false
	}
	return o.AffectedTargetIds, true
}

// HasAffectedTargetIds returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasAffectedTargetIds() bool {
	if o != nil && !utils.IsNil(o.AffectedTargetIds) {
		return true
	}

	return false
}

// SetAffectedTargetIds gets a reference to the given []string and assigns it to the AffectedTargetIds field.
func (o *EventApiAffectedAgent) SetAffectedTargetIds(v []string) {
	o.AffectedTargetIds = v
}

// GetAffectedTestIds returns the AffectedTestIds field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetAffectedTestIds() []string {
	if o == nil || utils.IsNil(o.AffectedTestIds) {
		var ret []string
		return ret
	}
	return o.AffectedTestIds
}

// GetAffectedTestIdsOk returns a tuple with the AffectedTestIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetAffectedTestIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AffectedTestIds) {
		return nil, false
	}
	return o.AffectedTestIds, true
}

// HasAffectedTestIds returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasAffectedTestIds() bool {
	if o != nil && !utils.IsNil(o.AffectedTestIds) {
		return true
	}

	return false
}

// SetAffectedTestIds gets a reference to the given []string and assigns it to the AffectedTestIds field.
func (o *EventApiAffectedAgent) SetAffectedTestIds(v []string) {
	o.AffectedTestIds = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EventApiAffectedAgent) GetLinks() AgentLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret AgentLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedAgent) GetLinksOk() (*AgentLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EventApiAffectedAgent) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AgentLinks and assigns it to the Links field.
func (o *EventApiAffectedAgent) SetLinks(v AgentLinks) {
	o.Links = &v
}

func (o EventApiAffectedAgent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventApiAffectedAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !utils.IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !utils.IsNil(o.AffectedTargetIds) {
		toSerialize["affectedTargetIds"] = o.AffectedTargetIds
	}
	if !utils.IsNil(o.AffectedTestIds) {
		toSerialize["affectedTestIds"] = o.AffectedTestIds
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableEventApiAffectedAgent struct {
	value *EventApiAffectedAgent
	isSet bool
}

func (v NullableEventApiAffectedAgent) Get() *EventApiAffectedAgent {
	return v.value
}

func (v *NullableEventApiAffectedAgent) Set(val *EventApiAffectedAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventApiAffectedAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventApiAffectedAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventApiAffectedAgent(val *EventApiAffectedAgent) *NullableEventApiAffectedAgent {
	return &NullableEventApiAffectedAgent{value: val, isSet: true}
}

func (v NullableEventApiAffectedAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventApiAffectedAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
