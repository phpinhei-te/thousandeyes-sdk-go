/*
Event Detection API

 Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventdetection

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the EventApiAffectedTest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EventApiAffectedTest{}

// EventApiAffectedTest struct for EventApiAffectedTest
type EventApiAffectedTest struct {
	// The ID of the affected test.
	TestId   *string   `json:"testId,omitempty"`
	TestType *TestType `json:"testType,omitempty"`
	// The test name as configured in the test settings.
	Name *string `json:"name,omitempty"`
	// An array of unique target IDs contributed data points which generated the signal for the event.
	AffectedTargetIds []string `json:"affectedTargetIds,omitempty"`
	// An array of unique agent IDs that contributed data points which generated the signal for the event.
	AffectedAgentIds []string        `json:"affectedAgentIds,omitempty"`
	Links            *EventTestLinks `json:"_links,omitempty"`
}

// NewEventApiAffectedTest instantiates a new EventApiAffectedTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventApiAffectedTest() *EventApiAffectedTest {
	this := EventApiAffectedTest{}
	return &this
}

// NewEventApiAffectedTestWithDefaults instantiates a new EventApiAffectedTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventApiAffectedTestWithDefaults() *EventApiAffectedTest {
	this := EventApiAffectedTest{}
	return &this
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *EventApiAffectedTest) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedTest) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *EventApiAffectedTest) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *EventApiAffectedTest) SetTestId(v string) {
	o.TestId = &v
}

// GetTestType returns the TestType field value if set, zero value otherwise.
func (o *EventApiAffectedTest) GetTestType() TestType {
	if o == nil || utils.IsNil(o.TestType) {
		var ret TestType
		return ret
	}
	return *o.TestType
}

// GetTestTypeOk returns a tuple with the TestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedTest) GetTestTypeOk() (*TestType, bool) {
	if o == nil || utils.IsNil(o.TestType) {
		return nil, false
	}
	return o.TestType, true
}

// HasTestType returns a boolean if a field has been set.
func (o *EventApiAffectedTest) HasTestType() bool {
	if o != nil && !utils.IsNil(o.TestType) {
		return true
	}

	return false
}

// SetTestType gets a reference to the given TestType and assigns it to the TestType field.
func (o *EventApiAffectedTest) SetTestType(v TestType) {
	o.TestType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventApiAffectedTest) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedTest) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventApiAffectedTest) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventApiAffectedTest) SetName(v string) {
	o.Name = &v
}

// GetAffectedTargetIds returns the AffectedTargetIds field value if set, zero value otherwise.
func (o *EventApiAffectedTest) GetAffectedTargetIds() []string {
	if o == nil || utils.IsNil(o.AffectedTargetIds) {
		var ret []string
		return ret
	}
	return o.AffectedTargetIds
}

// GetAffectedTargetIdsOk returns a tuple with the AffectedTargetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedTest) GetAffectedTargetIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AffectedTargetIds) {
		return nil, false
	}
	return o.AffectedTargetIds, true
}

// HasAffectedTargetIds returns a boolean if a field has been set.
func (o *EventApiAffectedTest) HasAffectedTargetIds() bool {
	if o != nil && !utils.IsNil(o.AffectedTargetIds) {
		return true
	}

	return false
}

// SetAffectedTargetIds gets a reference to the given []string and assigns it to the AffectedTargetIds field.
func (o *EventApiAffectedTest) SetAffectedTargetIds(v []string) {
	o.AffectedTargetIds = v
}

// GetAffectedAgentIds returns the AffectedAgentIds field value if set, zero value otherwise.
func (o *EventApiAffectedTest) GetAffectedAgentIds() []string {
	if o == nil || utils.IsNil(o.AffectedAgentIds) {
		var ret []string
		return ret
	}
	return o.AffectedAgentIds
}

// GetAffectedAgentIdsOk returns a tuple with the AffectedAgentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedTest) GetAffectedAgentIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AffectedAgentIds) {
		return nil, false
	}
	return o.AffectedAgentIds, true
}

// HasAffectedAgentIds returns a boolean if a field has been set.
func (o *EventApiAffectedTest) HasAffectedAgentIds() bool {
	if o != nil && !utils.IsNil(o.AffectedAgentIds) {
		return true
	}

	return false
}

// SetAffectedAgentIds gets a reference to the given []string and assigns it to the AffectedAgentIds field.
func (o *EventApiAffectedTest) SetAffectedAgentIds(v []string) {
	o.AffectedAgentIds = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EventApiAffectedTest) GetLinks() EventTestLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret EventTestLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventApiAffectedTest) GetLinksOk() (*EventTestLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EventApiAffectedTest) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given EventTestLinks and assigns it to the Links field.
func (o *EventApiAffectedTest) SetLinks(v EventTestLinks) {
	o.Links = &v
}

func (o EventApiAffectedTest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventApiAffectedTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.TestType) {
		toSerialize["testType"] = o.TestType
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.AffectedTargetIds) {
		toSerialize["affectedTargetIds"] = o.AffectedTargetIds
	}
	if !utils.IsNil(o.AffectedAgentIds) {
		toSerialize["affectedAgentIds"] = o.AffectedAgentIds
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableEventApiAffectedTest struct {
	value *EventApiAffectedTest
	isSet bool
}

func (v NullableEventApiAffectedTest) Get() *EventApiAffectedTest {
	return v.value
}

func (v *NullableEventApiAffectedTest) Set(val *EventApiAffectedTest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventApiAffectedTest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventApiAffectedTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventApiAffectedTest(val *EventApiAffectedTest) *NullableEventApiAffectedTest {
	return &NullableEventApiAffectedTest{value: val, isSet: true}
}

func (v NullableEventApiAffectedTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventApiAffectedTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
