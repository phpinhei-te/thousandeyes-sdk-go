/*
Event Detection API

 Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventdetection

import (
	"encoding/json"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NetworkEventGrouping type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NetworkEventGrouping{}

// NetworkEventGrouping struct for NetworkEventGrouping
type NetworkEventGrouping struct {
	// AS number of the source network (for network-pop and network events).
	SourceAsn *int32 `json:"sourceAsn,omitempty"`
	// AS number of the destination network (for network events).
	DestAsn *int32 `json:"destAsn,omitempty"`
	// The source network's country code (for network-pop and network events).
	SourceCountryCode *string `json:"sourceCountryCode,omitempty"`
}

// NewNetworkEventGrouping instantiates a new NetworkEventGrouping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkEventGrouping() *NetworkEventGrouping {
	this := NetworkEventGrouping{}
	return &this
}

// NewNetworkEventGroupingWithDefaults instantiates a new NetworkEventGrouping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkEventGroupingWithDefaults() *NetworkEventGrouping {
	this := NetworkEventGrouping{}
	return &this
}

// GetSourceAsn returns the SourceAsn field value if set, zero value otherwise.
func (o *NetworkEventGrouping) GetSourceAsn() int32 {
	if o == nil || utils.IsNil(o.SourceAsn) {
		var ret int32
		return ret
	}
	return *o.SourceAsn
}

// GetSourceAsnOk returns a tuple with the SourceAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkEventGrouping) GetSourceAsnOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.SourceAsn) {
		return nil, false
	}
	return o.SourceAsn, true
}

// HasSourceAsn returns a boolean if a field has been set.
func (o *NetworkEventGrouping) HasSourceAsn() bool {
	if o != nil && !utils.IsNil(o.SourceAsn) {
		return true
	}

	return false
}

// SetSourceAsn gets a reference to the given int32 and assigns it to the SourceAsn field.
func (o *NetworkEventGrouping) SetSourceAsn(v int32) {
	o.SourceAsn = &v
}

// GetDestAsn returns the DestAsn field value if set, zero value otherwise.
func (o *NetworkEventGrouping) GetDestAsn() int32 {
	if o == nil || utils.IsNil(o.DestAsn) {
		var ret int32
		return ret
	}
	return *o.DestAsn
}

// GetDestAsnOk returns a tuple with the DestAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkEventGrouping) GetDestAsnOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DestAsn) {
		return nil, false
	}
	return o.DestAsn, true
}

// HasDestAsn returns a boolean if a field has been set.
func (o *NetworkEventGrouping) HasDestAsn() bool {
	if o != nil && !utils.IsNil(o.DestAsn) {
		return true
	}

	return false
}

// SetDestAsn gets a reference to the given int32 and assigns it to the DestAsn field.
func (o *NetworkEventGrouping) SetDestAsn(v int32) {
	o.DestAsn = &v
}

// GetSourceCountryCode returns the SourceCountryCode field value if set, zero value otherwise.
func (o *NetworkEventGrouping) GetSourceCountryCode() string {
	if o == nil || utils.IsNil(o.SourceCountryCode) {
		var ret string
		return ret
	}
	return *o.SourceCountryCode
}

// GetSourceCountryCodeOk returns a tuple with the SourceCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkEventGrouping) GetSourceCountryCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SourceCountryCode) {
		return nil, false
	}
	return o.SourceCountryCode, true
}

// HasSourceCountryCode returns a boolean if a field has been set.
func (o *NetworkEventGrouping) HasSourceCountryCode() bool {
	if o != nil && !utils.IsNil(o.SourceCountryCode) {
		return true
	}

	return false
}

// SetSourceCountryCode gets a reference to the given string and assigns it to the SourceCountryCode field.
func (o *NetworkEventGrouping) SetSourceCountryCode(v string) {
	o.SourceCountryCode = &v
}

func (o NetworkEventGrouping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkEventGrouping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.SourceAsn) {
		toSerialize["sourceAsn"] = o.SourceAsn
	}
	if !utils.IsNil(o.DestAsn) {
		toSerialize["destAsn"] = o.DestAsn
	}
	if !utils.IsNil(o.SourceCountryCode) {
		toSerialize["sourceCountryCode"] = o.SourceCountryCode
	}
	return toSerialize, nil
}

type NullableNetworkEventGrouping struct {
	value *NetworkEventGrouping
	isSet bool
}

func (v NullableNetworkEventGrouping) Get() *NetworkEventGrouping {
	return v.value
}

func (v *NullableNetworkEventGrouping) Set(val *NetworkEventGrouping) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkEventGrouping) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkEventGrouping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkEventGrouping(val *NetworkEventGrouping) *NullableNetworkEventGrouping {
	return &NullableNetworkEventGrouping{value: val, isSet: true}
}

func (v NullableNetworkEventGrouping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkEventGrouping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
